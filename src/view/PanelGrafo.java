/**
 * Componente Curricular: Módulo Integrado de Programação II
 * Autor: <Roberto Maia Rodrigues Junior e Daniel Cavalcante Dourado>
 * Data:  <07/02/2019>
 *
 * Declaro que este código foi elaborado por mim de forma individual e
 * não contém nenhum trecho de código de outro colega ou de outro autor, 
 * tais como provindos de livros e apostilas, e páginas ou documentos 
 * eletrônicos da Internet. Qualquer trecho de código de outra autoria que
 * uma citação para o  não a minha está destacado com  autor e a fonte do
 * código, e estou ciente que estes trechos não serão considerados para fins
 * de avaliação. Alguns trechos do código podem coincidir com de outros
 * colegas pois estes foram discutidos em sessões tutorias.
 */
package view;

import controller.Controller;
import static java.awt.Color.black;
import static java.awt.Color.blue;
import java.awt.Graphics;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Caminho;
import model.Cidade;


/**
 *  Classe herda de JPanel e é responsável pelo desenho do grafo na interface.
 * @author Roberto Maia
 * @author Daniel Dourado
 */
public class PanelGrafo extends javax.swing.JPanel {

    /**
     * Creates new form Grafo
     */
    public PanelGrafo() {
        initComponents();
    }

    /**
     * Método responsável por desenhar no JPanel.
     * @param g 
     */
    @Override
    protected void paintComponent(Graphics g) {
        Controller c = new Controller();
        Cidade[] cidades;
        Caminho[] caminhos;
        super.paintComponent(g);
        try {
            int i = 0, j = 0;
            cidades = c.lerArquivoCidades();
            caminhos = c.lerArquivoDistanciaCidades(cidades);
            while (j < 42) {
                double x1 = (caminhos[j].getX1()-335)*1.5;
                double x2 = (caminhos[j].getX2()-335)*1.5;
                double y1 = (caminhos[j].getY1()-43)*1.25;
                double y2= (caminhos[j].getY2()-43)*1.25;
                g.setColor(black);
                g.drawLine((int)(x1),(int)(y1),(int)(x2),(int)(y2));
                j++;
            }
            while (i < 32) {
                int x = (cidades[i].getCoordenadaX()) - 340;
                int y = (cidades[i].getCoordenadaY()) - 50;
                g.setColor(blue);
                g.fillOval((int) (x*1.5), (int) (y*1.25), 20, 20);
                g.drawString(cidades[i].getNomeCidade(), (int) (x*1.5) - 35, (int) (y*1.25) - 10);
                i++;
            }
        } catch (IOException ex) {
            Logger.getLogger(SistemaDeRoteamento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
